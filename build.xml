<project default="jar">
	<property name="targetdir" value="bin"/>
	<property name="class.dir" value="${targetdir}"/>
	<property name="srcdir"    value="src"/>
	<property name="test.dir" value="tests" />
	<property name="test.class.dir" value="test-classes" />
	<property name="build.jar" value="hadoop-bam.jar" />

	<property name="cloudera.cdh.parcel" value="/opt/cloudera/parcels/CDH" />

	<property environment="env"/>

	<!-- look for junit jars on the various platforms -->
	<fileset id="junit_jars_ubuntu" dir="/usr/share/java">
		<include name="junit4.jar"/>
		<include name="hamcrest-*.jar"/>
	</fileset>

	<fileset id="junit_jars_gentoo" dir="/usr/share">
		<include name="junit-4/lib/*.jar"/>
		<include name="hamcrest-core/lib/*.jar" />
	</fileset>

	<fileset id="junit_jars_scientific_linux" dir="/usr/share/java/">
		<include name="ant/*junit*.jar" />
		<include name="junit4.jar" />
		<include name="hamcrest/*.jar" />
	</fileset>

	<!-- gives a change to the user to add custom jar paths -->
	<fileset id="jars_override" dir="/">
		<include name="${jars.override}" />
	</fileset>

	<fileset id="srcfiles" dir="${srcdir}" includes="**/*.java"/>

	<path id="classpath">
		<fileset refid="jars_override" />
		<fileset id="hadoop_jars" dir="${env.HADOOP_HOME}"
		         erroronmissingdir="false">
			<include name="hadoop-*.jar"/>
			<include name="lib/*.jar"/>
			<include name="share/hadoop/*/*.jar"/>
			<include name="share/hadoop/*/lib/*.jar"/>
<!-- <include name="**/*.jar" /> -->

		</fileset>
		<!-- CDH4 installed with Cloudera Manager  -->
		<fileset dir="${cloudera.cdh.parcel}/lib/hadoop/client-0.20" erroronmissingdir="false"> <include name="**/*.jar" /> </fileset>
		<fileset dir="${cloudera.cdh.parcel}/lib/hadoop/client" erroronmissingdir="false"> <include name="**/*.jar" /> </fileset>

		<pathelement path="sam-1.76.jar"/>
		<pathelement path="picard-1.76.jar"/>
	</path>

	<!-- Check for whether we need to use our custom back-ported compatibility
		  versions of some Hadoop classes.
	  -->
	<available classname="org.apache.hadoop.mapreduce.lib.partition.InputSampler"
	           property="exists.InputSampler" classpathref="classpath"/>
	<available classname="org.apache.hadoop.mapreduce.lib.partition.TotalOrderPartitioner"
	           property="exists.TotalOrderPartitioner" classpathref="classpath"/>
	<available classname="org.apache.hadoop.mapreduce.lib.output.MultipleOutputs"
	           property="exists.MultipleOutputs" classpathref="classpath"/>

	<target name="compile-hadoop">
		<mkdir dir="${targetdir}"/>
		<javac
			srcdir="${srcdir}/hadoop"
			destdir="${targetdir}"
			source="1.6" target="1.6"
			encoding="UTF-8"
			debug="on"
			includeantruntime="yes"
		>
			<classpath refid="classpath"/>
			<include name="org/**/*.java"/>

			<exclude
				name="org/apache/hadoop/mapreduce/lib/partition/InputSampler.java"
				if="exists.InputSampler"/>
			<exclude
				name="org/apache/hadoop/mapreduce/lib/partition/TotalOrderPartitioner.java"
				if="exists.TotalOrderPartitioner"/>
			<exclude
				name="org/apache/hadoop/mapreduce/lib/output/MultipleOutputs.java"
				if="exists.MultipleOutputs"/>

			<compilerarg compiler="modern" value="-Xlint:none"/>
		</javac>
	</target>

	<target name="compile-custom">
		<mkdir dir="${targetdir}"/>
		<javac
			srcdir="${srcdir}"
			destdir="${targetdir}"
			source="1.6" target="1.6"
			encoding="UTF-8"
			debug="on"
			includeantruntime="yes"
		>
			<classpath refid="classpath"/>
			<include name="fi/tkk/ics/hadoop/bam/custom/**/*.java"/>
		</javac>
	</target>

	<target name="compile" depends="compile-custom,compile-hadoop">
		<mkdir dir="${targetdir}"/>
		<javac
			srcdir="${srcdir}"
			destdir="${targetdir}"
			source="1.6" target="1.6"
			encoding="UTF-8"
			debug="on"
			includeantruntime="yes"
		>
			<classpath refid="classpath"/>
			<include name="fi/**/*.java"/>

			<compilerarg compiler="modern" value="-Xlint:all,-serial"/>
		</javac>
	</target>

	<target name="jar" depends="compile">
		<jar destfile="${build.jar}" basedir="${targetdir}">
			<include name="**/*.class"/>
			<manifest>
				<attribute name="Main-Class"
					value="fi.tkk.ics.hadoop.bam.cli.Frontend"/>
			</manifest>
			<service type="fi.tkk.ics.hadoop.bam.cli.CLIPlugin">
				<provider classname="fi.tkk.ics.hadoop.bam.cli.plugins.View"/>
				<provider classname="fi.tkk.ics.hadoop.bam.cli.plugins.Sort"/>
				<provider classname="fi.tkk.ics.hadoop.bam.cli.plugins.Index"/>
				<provider classname="fi.tkk.ics.hadoop.bam.cli.plugins.Cat"/>
				<provider classname="fi.tkk.ics.hadoop.bam.cli.plugins.chipster.Summarize"/>
				<provider classname="fi.tkk.ics.hadoop.bam.cli.plugins.chipster.SummarySort"/>
			</service>
		</jar>
	</target>

	<target name="clean">
		<delete failonerror="false" dir="${test.class.dir}"/>
		<delete failonerror="false" file="${build.jar}"/>
		<delete>
			<fileset dir="${targetdir}" includes="**/*.class"/>
		</delete>
	</target>

	<target name="javadoc">
		<javadoc
			destdir="doc"
			locale="en_GB"
			   encoding="UTF-8"
			docencoding="UTF-8"
			source="1.6"
			linksource="yes"
			breakiterator="yes"
			windowtitle="hadoop-bam API documentation"
		>
			<classpath refid="classpath"/>
			<fileset refid="srcfiles"/>
		</javadoc>
	</target>

	<target name="build-tests" depends="compile">
		<mkdir dir="${test.class.dir}"/>
		<javac srcdir="${test.dir}" destdir="${test.class.dir}" includeAntRuntime="false" debug="true">
			<classpath>
				<pathelement path="${class.dir}"/>
				<fileset refid="hadoop_jars"/>
				<fileset refid="jars_override" />
				<fileset refid="junit_jars_ubuntu" />
				<fileset refid="junit_jars_gentoo" />
				<fileset refid="junit_jars_scientific_linux" />
			</classpath>

			<!--
				We suppress deprecation warnings to avoid lots of warnings on the
				mapred classes.
				-->
			<compilerarg value="-Xlint"/>
			<compilerarg value="-Xlint:-deprecation"/>
		</javac>
	</target>

	<target name="run-tests" depends="build-tests">
		<junit showoutput="true">
			<classpath>
				<pathelement path="${class.dir}"/>
				<pathelement path="${test.class.dir}"/>
				<fileset refid="hadoop_jars"/>
				<fileset refid="jars_override" />
				<fileset refid="junit_jars_ubuntu" />
				<fileset refid="junit_jars_gentoo" />
				<fileset refid="junit_jars_scientific_linux" />
			</classpath>
			<formatter type="brief" usefile="false"/>
			<batchtest>
				<fileset dir="${test.class.dir}">
					 <include name="**/Test*.class" />
					 <exclude name="**/Test*$*.class" />  <!-- exclude inner classes -->
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="run-one-test" depends="build-tests">
		<fail unless="run.class" message="You must set the class to run with -Drun.class=&lt;your class&gt;" />
		<echo message="Running class ${run.class}" />
		<java classname="${run.class}">
			<classpath>
				<pathelement path="${class.dir}"/>
				<pathelement path="${test.class.dir}"/>
				<fileset refid="hadoop_jars"/>
				<fileset refid="jars_override" />
				<fileset refid="junit_jars_ubuntu" />
				<fileset refid="junit_jars_gentoo" />
				<fileset refid="junit_jars_scientific_linux" />
			</classpath>
		</java>
	</target>
</project>
